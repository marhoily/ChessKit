<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(ProjectDir)bin\Debug\ChessKit.ChessLogic.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ChessKit.ChessLogic" #> 
namespace ChessKit.ChessLogic
{
  partial class Board
  {
<#
foreach (var color in new []{PieceColor.White, PieceColor.Black})
{
#>

    private bool IsAttackedBy<#=color#>(int cell)
    {
<#
  foreach (var p in Piece.All) 
    if (p.Color == color)
      foreach (var dir in p.MoveDirections)
        if (dir.CapturesThisWay)
      {
        var delta = dir.DeltaY * 16 + dir.DeltaX;
        if (dir.Count > 1)
        {
#>
      for (var i = cell + <#=delta#>; (i & 0x88) == 0; i += <#=delta#>)
      {
        var piece = _cells[i];
        if (piece == 0) continue;
        if (piece == (byte)CompactPiece.<#=p.Color#><#=p.PieceType#>) return true;
        break;
      }
<#
    }
    else
    {
#>
      {
        var square = cell - <#=delta#>;
        if ((square & 0x88) == 0)
          if (_cells[square] == (byte)CompactPiece.<#=p.Color#><#=p.PieceType#>)
            return true;
      }
<#
    }
  }
#>
      return false;
    }
<#
}
#>

<#
foreach (var color in new []{PieceColor.White, PieceColor.Black})
{
#>
    private ulong Build<#=color#>PinMap(int cell)
    {
	  var result = 1ul << cell;
	  const byte rook = (byte)(MoveHints.Rook | MoveHints.Queen);
	  const byte bishop = (byte)(MoveHints.Bishop | MoveHints.Queen);
<#
  foreach (var dir in Piece.WhiteQueen.MoveDirections)
  {
    var delta = dir.DeltaY * 16 + dir.DeltaX;
	var target = Piece.WhiteRook.MoveDirections.Contains(dir) ? "rook" : "bishop";
#>
      {
        var direction = 0ul;
	    var counter = 0;
        for (var i = cell + <#=delta#>; (i & 0x88) == 0; i += <#=delta#>)
        {
          var piece = _cells[i];
          if (piece == 0) 
		  {
		    direction |= 1ul << i;
		  }
          else if (Piece.UnpackColor((CompactPiece)piece) == PieceColor.<#=color#>)
	  	  {
	  	    if (++counter == 2) 
			  direction = 0;
	  	    direction |= 1ul << i;
	  	  }
	  	  else
	  	  {
            if ((piece & <#=target#>) != 0) 
			  result |= direction;
	  	    break;
	  	  }
        }
	  }

<#
  }
#>
      return result;
    }
<#
}
#>
  }
}