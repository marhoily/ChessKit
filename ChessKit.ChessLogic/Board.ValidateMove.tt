<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(ProjectDir)bin\Debug\ChessKit.ChessLogic.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ChessKit.ChessLogic" #>
namespace ChessKit.ChessLogic
{
  partial class Board
  {
<#
  foreach (var p in Piece_.All.Where(p => p.PieceType != PieceType.Pawn))
  {
    var isSlider = p.MoveDirections.Any(dir => dir.Count > 1);
#>    private <#=isSlider?"" : "static "#>MoveAnnotations Validate<#=p.Color#><#=p.PieceType#>Move(int fromSquare, int toSquare)
    {
	  var dx = toSquare - fromSquare;
<#
	if (isSlider)
	{
      foreach (var dir in p.MoveDirections)
      {
        var delta = dir.DeltaY * 16 + dir.DeltaX;
#>      if (dx % <#=delta#> == 0) 
      {
        var steps = dx / <#=delta#>;
        if (steps >= 0 && steps < 8) 
            for (var i = fromSquare + <#=delta#>; (i & 0x88) == 0; i += <#=delta#>)
            if (i == toSquare) return MoveAnnotations.<#=p.PieceType#>;
            else if (this[i] != CompactPiece.EmptyCell) 
			  return MoveAnnotations.<#=p.PieceType#> | MoveAnnotations.DoesNotJump;
      }
<#
	  }
#>          return MoveAnnotations.<#=p.PieceType#> | MoveAnnotations.DoesNotMoveThisWay;
<#
    }
	else // Non-slider move
	{
#>      switch (dx)
      {      
<#
      foreach (var dir in p.MoveDirections.Where(m => !m.IsSpecial))
      {
        var delta = dir.DeltaY * 16 + dir.DeltaX;
#>        case <#=delta#>:
          return MoveAnnotations.<#=p.PieceType#>;
<#
	  }
#>      }
	  return MoveAnnotations.<#=p.PieceType#> | MoveAnnotations.DoesNotMoveThisWay;
<#         
	}
#>    }
<#
  } // --------------------------------------------------
#>  
    public MoveAnnotations ValidateMove(CompactPiece piece, int fromSquare, int toSquare, CompactPiece toPiece, Caslings castlingAvailability)
    {
	  switch (piece)
      {
<#
  foreach (var p in Piece_.All) 
  {
#>        case CompactPiece.<#=p.Color#><#=p.PieceType#>:
<#
	if (p.PieceType == PieceType.Pawn)
	{
#>          return Validate<#=p.Color#>PawnMove(fromSquare, toSquare, toPiece);

<#
	}
	else if (p.PieceType == PieceType.King)
	{
#>          if (Validate<#=p.Color#><#=p.PieceType#>Move(fromSquare, toSquare) == MoveAnnotations.King)
            return MoveAnnotations.King;
		  return Validate<#=p.Color#>CastlingMove(fromSquare, toSquare, castlingAvailability);

<#
	}
	else 
	{
#>          return Validate<#=p.Color#><#=p.PieceType#>Move(fromSquare, toSquare);

<#
    }
  }
#>        default: throw new System.InvalidOperationException("Unknown piece: " + piece);
	  }
    }  
  }
}