<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="IsLegalMove.cs.ttinclude"#>
<# 
var args = new[]
{
    new Arg
    {
        Color = "White",
		Tests = new []
		{
		    new Tst
		    {
		        Name = "White bishop moves from E4 to ",
		        Set = "E4:B",
				From = "E4",
				Legal = "B1, C2, D3, F5, G6, H7, A8, B7, C6, D5, F3, G2, H1" 
		    }, 
		}
    }
};
#>
using System;
using FluentAssertions;
using NUnit.Framework;

namespace ChessKit.ChessLogic.UnitTests
{
	partial class Bitboard
	{
<#
    foreach (var o in args)
	{
#>
		private bool IsLegal<#=o.Color#>BishopMove(int fromSquare, int toSquare)
		{
		    var index = fromSquare*64 + toSquare; 
		    var rect = RectangularMasks[index]; 
			if (rect == 0) return false; 
			var attack = BishopAttackMasks[fromSquare];
		    var boundAttack = rect & attack;
            if (boundAttack == 0) return false;
		    var ray = _occupance<#=o.OppositeColor#> & boundAttack; 
		    var toBit = (1ul << toSquare); 
		    return (ray | toBit) == toBit; 
		}
<#
	}
#>		
 
	}
    [TestFixture]
    public class BitboardTest_BishopMoves
    {
        private Bitboard _bitboard;

        [SetUp]
        public void Initialize()
        {
            _bitboard = new Bitboard();
        }
<#
    foreach (var o in args)
	{
#>
<#
    foreach (var t in o.Tests)
	{
#>
        [Test]
        [TestCase(TestName="<#=t.Name#>")]
        public void IsLegalMove_For_<#=o.Color#>_Bishop_From_<#=t.From#>_To_Every_Other_Cell_Then_<#=string.Join("_",t.Expected)#>_Should_Return_False()
        {
<#
    foreach (var placement in t.Position)
	{
#>
            _bitboard[Bitboard.<#=placement.Coordinate#>] = <#=placement.Piece#>;
<#
	}
#>	
            _bitboard.AssertLegalMoves(<#=string.Join(", ",new[]{t.From}.Concat(t.Expected).Select(cell => "Square."+cell))#>);
        }

<#
	}
#>	
<#
	}
#>		
    }
}
