<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;

namespace ChessKit.ChessLogic.UnitTests
{
	partial class Bitboard
	{
		public static readonly UInt64[] RectangularMasks = new UInt64[]
			{
				<#=string.Join(", ", GetMasksArray().Select(i => i == 0? "0" : "0x" + i.ToString("x16")))#>
			};
		public static readonly UInt64[] BishopAttackMasks = new UInt64[]
			{
				<#=string.Join(", ", GetBishopMasks().Select(i => "0x" + i.ToString("x16")))#>
			};
	}
}

<#+

static UInt64[] GetMasksArray()
{
    var arr = new UInt64[4096];
    for (int i = 0; i < arr.Length; i++)
    {
        arr[i] = 0;
    }
    foreach (var rect in GetMovableRects())
    {
        var x1 = rect.Item1;
        var y1 = rect.Item2;
        var x2 = rect.Item3;
        var y2 = rect.Item4;

        if (x1 == x2 && y1 == y2) continue;

        var l = Math.Min(x1, x2);
        var r = Math.Max(x1, x2);
        var t = Math.Min(y1, y2);
        var b = Math.Max(y1, y2);

        UInt64 mask = 0;
        for (var m = 0; m < 64; m++)
        {
            var x = m%8;
            var y = m/8;
			if (x >= l && x <= r)
			    if (y >= t && y <= b)
			        mask |= (1ul << m);						
        }
        arr[(y1*8 + x1)*64+(y2*8 + x2)] = mask;
	}
    return arr;
}
static UInt64[] GetBishopMasks()
{
    var arr = new UInt64[64];
    for (int i = 0; i < 64; i++)
    {
        var moves = new HashSet<Tuple<int, int, int, int>>();
		AddBishopMoves(moves, i/8, i%8);

        UInt64 mask = 0;
        foreach (var m in moves)
			if (m.Item1 != m.Item3 || m.Item2 != m.Item4)
				mask |= (1ul << (m.Item3*8 + m.Item4));						
        arr[i] = mask;
	}
    return arr;
}

static IEnumerable<Tuple<int, int, int, int>> GetMovableRects()
{
    var set = new HashSet<Tuple<int, int, int, int>>();
    for (int x = 0; x < 8; x++)
        for (var y = 0; y < 8; y++)
        {
            AddRookMoves(set, x, y);
            AddBishopMoves(set, x, y);
        }

    return set;
}

    private static void AddBishopMoves(HashSet<Tuple<int, int, int, int>> set, int x, int y)
    {
		// positive diagonal
        for (int i = -Math.Min(x, y); x + i < 8 && y + i < 8; i++)
            set.Add(Tuple.Create(x, y, x + i, y + i));
        // negative diagonal
        for (int i = -Math.Min(8 - x, y); x - i >= 0 && y + i < 8; i++)
            set.Add(Tuple.Create(x, y, x - i, y + i));
    }

    private static void AddRookMoves(HashSet<Tuple<int, int, int, int>> set, int x, int y)
    {
		// vertical
        for (int i = 0; i < 8; i++)
            set.Add(Tuple.Create(x, y, x, i));
        // horizontal
        for (int i = 0; i < 8; i++)
            set.Add(Tuple.Create(x, y, i, y));
    }

#>